const CHARSETS = {
    uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
    lowercase: 'abcdefghijklmnopqrstuvwxyz',
    numbers: '0123456789',
    symbols: '!@#$%^&*()_+-=[]{}|;:,.<>?',
};
const shuffleArray = (array) => { for (let i = array.length - 1; i > 0; i--) { const j = Math.floor(Math.random() * (i + 1));[array[i], array[j]] = [array[j], array[i]]; } return array; };
export const generatePassword = (options) => { const { length, includeUppercase, includeLowercase, includeNumbers, includeSymbols, customChars, excludeAmbiguous, prefix, suffix } = options; const generationLength = length - (prefix?.length || 0) - (suffix?.length || 0); if (generationLength < 1) { throw new Error('Prefix/suffix is too long for the selected password length.'); } const requiredChars = []; let characterPool = []; const charOptions = [{ checked: includeUppercase, chars: CHARSETS.uppercase }, { checked: includeLowercase, chars: CHARSETS.lowercase }, { checked: includeNumbers, chars: CHARSETS.numbers }, { checked: includeSymbols, chars: CHARSETS.symbols }, { checked: customChars, chars: customChars },]; charOptions.forEach(opt => { if (opt.checked && opt.chars) { let filteredChars = opt.chars.split(''); if (excludeAmbiguous) { const ambiguousRegex = new RegExp(`[Il1O0]`, 'g'); filteredChars = filteredChars.filter(char => !char.match(ambiguousRegex)); } if (filteredChars.length > 0) { characterPool.push(...filteredChars); requiredChars.push(filteredChars[Math.floor(Math.random() * filteredChars.length)]); } } }); if (characterPool.length === 0) { throw new Error('No character types selected.'); } const remainingLength = generationLength - requiredChars.length; let randomChars = []; if (remainingLength > 0) { for (let i = 0; i < remainingLength; i++) { randomChars.push(characterPool[Math.floor(Math.random() * characterPool.length)]); } } const combinedChars = requiredChars.concat(randomChars); const shuffledCore = shuffleArray(combinedChars).join('').slice(0, generationLength); return `${prefix || ''}${shuffledCore}${suffix || ''}`; };
